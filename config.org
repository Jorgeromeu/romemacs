#+TITLE: Emacs Config
#+PROPERTY: header-args :tangle ~/.emacs.d/init.el

This org document contains my emacs configuration. In order to write to the actual =init.el= execute the following line with =C-x C-e=

(org-babel-tangle)

* Notes
** Hooks

Adding a hook to a node means consists in telling emacs to call a function whenever you enter the given mode. For example:

=(add-hook 'text-mode-hook (lambda () (column-number-mode 1)))=

executes the provided lambda (which toggles column number in modeline) whenever we enter text-mode. Likewise you an remove hooks with =remove-hook=:

=(remove-hook 'text-mode-hook (lambda () (column-number-mode 1)))=

Likewise you can simply set the hook to =nil= to clear all hooks:

=(setq org-mode-hook nil)=


* Package initialization
  
Setting up package sources as well as =use-package=.

#+BEGIN_SRC emacs-lisp
(require 'package)

(setq package-archives '(("melpa" . "https://melpa.org/packages/")
                         ("org" . "https://orgmode.org/elpa/")
                         ("elpa" . "https://elpa.gnu.org/packages/")))

(package-initialize)
(unless package-archive-contents
 (package-refresh-contents))

;; Initialize use-package on non-Linux platforms
(unless (package-installed-p 'use-package)
   (package-install 'use-package))

(require 'use-package)
(setq use-package-always-ensure t)
#+END_SRC

* Editor settings
** Basic UI changes

Remove GUI elements and remove startup screen.

#+BEGIN_SRC emacs-lisp
(setq inhibit-startup-message t)

(scroll-bar-mode -1)        ; Disable visible scrollbar
(tool-bar-mode -1)          ; Disable the toolbar
(tooltip-mode -1)           ; Disable tooltips
(set-fringe-mode 10)        ; Give some breathing room
(menu-bar-mode -1)          ; Disable the menu bar
#+END_SRC

Show text prompts instead of dialog popups

#+BEGIN_SRC emacs-lisp
(setq use-dialog-box \nil)
(defalias 'yes-or-no-p 'y-or-n-p)
#+END_SRC

Disable blinking cursor

#+BEGIN_SRC emacs-lisp
(blink-cursor-mode 0)
#+END_SRC

#+RESULTS:

** Font configuration

I am using Hack Nerd font for monospaced and standard sans serif for sans.

#+BEGIN_SRC emacs-lisp
(defvar rom/default-font-size 110)
(defvar rom/default-variable-font-size 120)

(set-face-attribute 'default nil :font "Hack Nerd Font" :height rom/default-font-size)

;; Set the fixed pitch face
(set-face-attribute 'fixed-pitch nil :font "Hack Nerd Font" :height rom/default-font-size)

;; Set the variable pitch face
(set-face-attribute 'variable-pitch nil :font "sans" :height rom/default-variable-font-size :weight 'regular)
#+END_SRC

#+RESULTS:

** Quality of life changes

Store registers on exit.

#+BEGIN_SRC emacs-lisp
(savehist-mode 1) 
(setq savehist-additional-variables '(register-alist))
#+END_SRC

Dont make backup files

#+BEGIN_SRC emacs-lisp
(setq make-backup-files nil)
#+END_SRC

Use a visual bell rather than beeping.

#+BEGIN_SRC emacs-lisp
(setq visible-bell t)
#+END_SRC

Disable alarms entirely

#+BEGIN_SRC emacs-lisp
(setq ring-bell-function 'ignore)
#+END_SRC

Make =Esc= quit prompts.

#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "<escape>") 'keyboard-escape-quit)
#+END_SRC

Use system clipboard

#+BEGIN_SRC emacs-lisp
(setq select-enable-clipboard t)
(setq x-select-request-type '(UTF8_STRING COMPOUND_TEXT TEXT STRING))
(setq mouse-yank-at-point t)
#+END_SRC

Increase undo limits

#+BEGIN_SRC emacs-lisp
(setq undo-limit 6710886400)
(setq undo-strong-limit 100663296)
(setq undo-outer-limit 1006632960)
#+END_SRC

** Scrolling

#+BEGIN_SRC emacs-lisp
(use-package smooth-scroll)
(smooth-scrolling-mode 1)
#+END_SRC

#+RESULTS:
: t

** Indentation

#+BEGIN_SRC emacs-lisp
(setq default-tab-width 4)
(setq tab-width 4)
(setq default-fill-column 80)
(setq fill-column 80)
(setq-default evil-indent-convert-tabs nil)
(setq-default indent-tabs-mode nil)
(setq-default tab-width 4)
(setq-default evil-shift-round nil)
#+END_SRC

** UTF-8

Always use UTF-8

#+BEGIN_SRC emacs-lisp
(prefer-coding-system 'utf-8) 
(set-default-coding-systems 'utf-8) 
(set-terminal-coding-system 'utf-8) 
(set-keyboard-coding-system 'utf-8) 
(setq default-buffer-fle-coding-system 'utf-8) 
#+END_SRC

** Line numbers

Enable line numbers by default

#+BEGIN_SRC emacs-lisp
(global-display-line-numbers-mode 1)
#+END_SRC

#+RESULTS:
: t

Disable line numbers on certain modes

#+BEGIN_SRC emacs-lisp
(dolist (mode '(org-mode-hook
                term-mode-hook
                shell-mode-hook
                eshell-mode-hook
                dired-mode-hook
                ielm-mode-hook))
  (add-hook mode (lambda () (display-line-numbers-mode 0))))
#+END_SRC

#+RESULTS:

** Word wrapping

Disable word wrapping by default

#+BEGIN_SRC emacs-lisp
(setq-default truncate-lines t)
#+END_SRC

#+RESULTS:
: t

** Code folding

Origami is used to implement code folding

#+BEGIN_SRC emacs-lisp
(use-package origami)
(global-origami-mode)
#+END_SRC

#+RESULTS:
: t

** Parentheses

*** Auto matching

The autopair package is used for auto-matching

#+BEGIN_SRC emacs-lisp
(use-package autopair)
(autopair-global-mode)
#+END_SRC

#+RESULTS:
: t

*** Rainbow parens

Rainbow delimiters are used for clarity and matching parnes are highlighted.

#+BEGIN_SRC emacs-lisp
(use-package rainbow-delimiters
  :hook (prog-mode . rainbow-delimiters-mode))

(show-paren-mode 1)
(setq blink-matching-paren nil)
(setq show-paren-delay 0.2)
(setq show-paren-highlight-openparen t)
(setq show-paren-when-point-inside-paren t)
#+END_SRC

** Concealing
  Display "lambda" as λ

#+BEGIN_SRC emacs-lisp
(global-prettify-symbols-mode 1)
#+END_SRC

#+RESULTS:
: t

* Aesthetics

Nord theme is my theme of choice.

#+BEGIN_SRC emacs-lisp
(use-package nord-theme)
(load-theme 'nord t)
#+END_SRC

The modeline being used is Doom Modeline, taken from doom emacs.

#+BEGIN_SRC emacs-lisp
(use-package all-the-icons)
(use-package doom-modeline
  :hook (after-init . doom-modeline-mode)
  :custom    
  (doom-modeline-height 25)
  (doom-modeline-bar-width 0)
  (doom-modeline-icon t)
  (doom-modeline-major-mode-icon t)
  (doom-modeline-major-mode-color-icon t)
  (doom-modeline-buffer-file-name-style 'truncate-upto-project)
  (doom-modeline-buffer-state-icon t)
  (doom-modeline-buffer-modification-icon t)
  (doom-modeline-minor-modes nil)
  (doom-modeline-enable-word-count t)
  (doom-modeline-buffer-encoding t)
  (doom-modeline-indent-info nil)
  (doom-modeline-checker-simple-format t)
  (doom-modeline-vcs-max-length 12)
  (doom-modeline-env-version t)
  (doom-modeline-irc-stylize 'identity)
  (doom-modeline-github-timer nil)
  (doom-modeline-gnus-timer nil))
#+END_SRC

dome-modeline-height

* IVY and Counsel

Use IVY to autocomplete buffers, file search, etc.

#+BEGIN_SRC emacs-lisp
(use-package ivy
  :diminish
  :bind (("C-s" . swiper)	
         :map ivy-minibuffer-map
         ("TAB" . ivy-alt-done)	
         ("C-l" . ivy-alt-done)
         ("C-j" . ivy-next-line)
         ("C-k" . ivy-previous-line)
         :map ivy-switch-buffer-map
         ("C-k" . ivy-previous-line)
         ("C-l" . ivy-done)
         ("C-d" . ivy-switch-buffer-kill)
         :map ivy-reverse-i-search-map
         ("C-k" . ivy-previous-line)
         ("C-d" . ivy-reverse-i-search-kill))
  :config
  (ivy-mode 1))

#+END_SRC

#+RESULTS:

Ivy-rich adds some extra columns to some counsel commands to provide more information about them.

#+BEGIN_SRC emacs-lisp
(use-package ivy-rich
  :init
  (ivy-rich-mode 1))
#+END_SRC

#+RESULTS:

Counsel provides replacements to some command such as =find-file= and =switch-buffer= and so on.

#+BEGIN_SRC emacs-lisp
(use-package counsel
  :custom
  (counsel-linux-app-format-function #'counsel-linux-app-format-function-name-only)
  :config
  (counsel-mode 1))
#+END_SRC

#+RESULTS:
: t

* Evil Mode
   
Main vim-emulation plugin

#+BEGIN_SRC emacs-lisp
(use-package evil
  :init
  (setq evil-want-integration t)
  (setq evil-want-keybinding nil)
  (setq evil-want-C-u-scroll t)
  (setq evil-want-C-i-jump nil)
  :config
  (evil-mode 1)
  (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)
  (define-key evil-insert-state-map (kbd "C-h") 'evil-delete-backward-char-and-join)

  ;; Use visual line motions even outside of visual-line-mode buffers
  (evil-global-set-key 'motion "j" 'evil-next-visual-line)
  (evil-global-set-key 'motion "k" 'evil-previous-visual-line)

  (evil-set-initial-state 'messages-buffer-mode 'normal)
  (evil-set-initial-state 'dashboard-mode 'normal))
#+END_SRC

evil collection enhances evil mode

#+BEGIN_SRC emacs-lisp
(use-package evil-collection
  :after evil
  :config
  (evil-collection-init))
#+END_SRC

#+RESULTS:
: t

Map insert mode =jj= to =Esc=

#+BEGIN_SRC emacs-lisp
(use-package key-chord)
(key-chord-mode 1)
(setq key-chord-two-keys-delay 0.5)
(key-chord-define evil-insert-state-map "jj" 'evil-normal-state)
(key-chord-mode 1)
#+END_SRC

#+RESULTS:
: t

* ORG

#+BEGIN_SRC emacs-lisp
(use-package org)
#+END_SRC

Change the elipsis marker from "..." to an arrow.

#+BEGIN_SRC emacs-lisp
(setq org-ellipsis " ▾" org-hide-emphasis-markers t)
#+END_SRC

** Org mode faces

The =rom/org-mode-faces= function sets up org mode indentation, visual-line mode and so on.

#+BEGIN_SRC emacs-lisp
(defun rom/org-mode-faces ()

  ;; word wrap
  (visual-line-mode 1)

  ;; Set heading face sizes
  (dolist (face '((org-level-1 . 1.4)
                  (org-level-2 . 1.3)
                  (org-level-3 . 1.2)
                  (org-level-4 . 1.1)
                  (org-level-5 . 1.1)
                  (org-level-6 . 1.1)
                  (org-level-7 . 1.1)
                  (org-level-8 . 1.1)))
      (set-face-attribute (car face) nil :weight 'bold :height (cdr face))))

(add-hook 'org-mode-hook 'rom/org-mode-faces)  
#+END_SRC

** Org mode Goyo

The runction =rom/goyo= uses the visual-fill-column package to center the buffer and word wrap

#+BEGIN_SRC emacs-lisp
(defun rom/goyo ()
  (setq visual-fill-column-width 100
        visual-fill-column-center-text t)
  (visual-fill-column-mode 1))

(use-package visual-fill-column)
(add-hook 'org-mode-hook 'rom/goyo)
#+END_SRC
